% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xml_fill_tempate.R
\name{xml_fill_template}
\alias{xml_fill_template}
\title{Title}
\usage{
xml_fill_template(xmltemplate, with, collapse = NULL, export = NULL,
  name = NULL)
}
\arguments{
\item{xmltemplate}{a xml document to use as template}

\item{with}{a dataframe with the values of elements to replace in \code{xmltemplate}. Colnames and text of elements to replace in \code{xmltemplate} must be equals.}

\item{collapse}{if \code{NULL} (default) the function return a list of xml documents of length the number of rows in \code{with}. otherwse you can specify a root name to collapse all new xml documents in one. If the given root name is also the root name of \code{xmltemplate}, the latter root must have only one children node.}

\item{export}{a string giving the path to the folder where the xml files are exported. If \code{NULL} (default), nothing is exported}

\item{name}{optional. Only if \code{export} is not \code{NULL}, either a single string with the name of the exported file or a vector of strings with the names of all the exported xml files. Length of name must be either 1 or equal to the rows number of \code{with}}
}
\value{
either a list of length \code{nrow(with)} where each element is a new xml document or only one new xml document if \code{collapse!=NULL}
}
\description{
Title
}
\examples{
library(xml2)
template <- read_xml("<parent><child nom=\\"child1\\"><grandchild>grandchild1</grandchild>
<grandchild>grandchild2</grandchild></child><child nom=\\"child2\\">null</child></parent>")
toreplace <- data.frame(child1 = c("Ben1", "Ben2"), child2 = c("Sarah1", "Sarah2"),
grandchild1 = c("Brad1", "Brad2"), grandchild2 = c("Jude1", "jude2"))

# No export, no collapsing
newxml <- xml_fill_template(template, toreplace)

# Export and collapsing
\dontrun{
newxml <- xml_fill_template(template, toreplace, collapse = "grandparent",
export = getwd(), name = "testexport")
}
}
